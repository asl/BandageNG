name: build-snapshots

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*"

env:
  BUILD_TYPE: Release
  QT_QPA_PLATFORM: offscreen
  XDG_RUNTIME_DIR: '/tmp/runtime-runner'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest]
        experimental: [false]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: '6.2.3'

      - name: Install appstream
        run: |
             if [ "$RUNNER_OS" == "Linux" ]; then
               sudo apt-get install -y appstream
             fi
        shell: bash

      - name: Configure CMake
        run: |
             if [ "$RUNNER_OS" == "Linux" ]; then
               cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=/usr
             elif [ "$RUNNER_OS" == "macOS" ]; then
               cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_INSTALL_PREFIX=/usr
             fi
        
      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j8

      - name: Make AppDir
        working-directory: ${{github.workspace}}/build
        run: make install DESTDIR=AppDir

      - if: runner.os == 'Linux'
        name: Make AppImage
        working-directory: ${{github.workspace}}/build
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage

          chmod +x linuxdeploy*.AppImage

          ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage
        shell: bash

      - if: runner.os == 'macOS'
        name: Make DMG
        working-directory: ${{github.workspace}}/build
        run: |
          macdeployqt BandageNG.app -dmg
        shell: bash

      - uses: actions/upload-artifact@v3
        with:
          name: Bandage-${{ runner.os }}
          path: |
             ${{github.workspace}}/build/BandageNG*.AppImage
             ${{github.workspace}}/build/BandageNG*.dmg

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft : true
          fail_on_unmatched_files : false
          files: |
             ${{github.workspace}}/build/BandageNG*.AppImage
             ${{github.workspace}}/build/BandageNG*.dmg
